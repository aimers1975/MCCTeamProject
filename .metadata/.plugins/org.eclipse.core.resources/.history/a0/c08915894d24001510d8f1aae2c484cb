package ParallelMatrix;

import java.lang.StringBuilder;

public class Matrix {
	
	int[][] matrix;

	public Matrix(int rows, int columns, boolean zerod, int max) {
		matrix = new int[rows][columns];
		for (int row=0; row<rows; row++) {
			for (int column=0; column < columns; column++) {
				if(zerod) {
					this.matrix[row][column] = 0;
				} else {
					this.matrix[row][column] = (row*column)% max;
				}
			}
		}		
	}
	
	public boolean setRow(int[] inputRow, int rowID) {
		if(inputRow.length != matrix[0].length && rowID < matrix.length) {
		    matrix[rowID] = inputRow;
		    return true;
		} else {
			return false;
		}
	}

	public int[] getRow(int row) {
		return matrix[row];
	}

	public int[] getColumn(int col) {
		return matrix[col];
	}
	
	public int getNumRows() {
		return matrix.length;
	}
	
	public int getNumColumns() {
		return matrix[0].length;
	}
	
	public boolean add(Matrix matrixA, Matrix matrixB, Matrix MatrixResult) {
		if((matrixA.getNumRows() != matrixB.getNumRows()) || 
		   (matrixA.getNumColumns() != matrixB.getNumColumns())) {
			return false;
		}
		return false;
	}
	
	public String toString() {
		StringBuilder sb = new StringBuilder();
		for(int i=0; i<getNumRows(); i++) {
			for(int j=0; j<getNumColumns(); j++) {
				sb.append(matrix[i][j] + " ");
			}
			sb.append("\n");
		}
		System.out.println(sb.toString());
		return sb.toString();
	}
	
	public static void main(String[] args) {
		Matrix sampleMatrix = new Matrix(2,4,false,10);
		sampleMatrix.toString();
		sampleMatrix.getRow(2);
		System.out.println("Created matrix.");
	}
}